name: iOS Build

on:
  push:
    branches:
      - dev # Trigger on push to the main branch

jobs:
  ios-build:
    name: iOS Build
    runs-on: macos-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'

      # - name: Cache node_modules
      #   id: modules-cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ./node_modules
      #     key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-modules-
      #       ${{ runner.os }}-
          

      - name: Install node_modules if necessary
        if: steps.modules-cache.outputs.cache-hit != 'true'
        shell: bash
        run: yarn install --frozen-lockfile

      - name: Cache Pods
        if: runner.os == 'macOS'
        uses: actions/cache@v3
        id: pods-cache
        with:
          path: |
            ./ios/Pods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          # Check if the cache hit
          if [ ! -d "Pods" ]; then
            pod install --repo-update
          else
            echo "Using cached Pods directory."
          fi

      - name: Setup Apple Developer Credentials
        run: |
          echo "APPLE_DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY=${{ secrets.APP_STORE_CONNECT_API_KEY }}" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_ID=${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}" >> $GITHUB_ENV
          echo "APP_STORE_CONNECT_API_KEY_ISSUER_ID=${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}" >> $GITHUB_ENV

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Set up Xcode 15.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 15.4

      # - name: Show available Xcode versions
      #   run: ls /Applications | grep Xcode

      # - name: Setup App Store Connect API Key
      #   run: |
      #     mkdir -p ~/.appstoreconnect/private_keys
      #     echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      # - name: Verify Signing Certificate
      #   run: security find-identity -p codesigning -v
      
      # - name: Install dependencies
      #   run: yarn install --frozen-lockfile --network-timeout 300000

      # - name: Install CocoaPods dependencies
      #   run: |
      #     cd ios
      #     pod install --repo-update

      # - name: Cache iOS Build
      #   uses: actions/cache@v4
      #   with:
      #     path: build/
      #     key: ios-build-${{ github.run_id }}
      #     restore-keys: |
      #       ios-build-
            # ðŸ“¦ Cache Yarn Dependencies
      # - name: Cache Yarn Dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: node_modules
      #     key: yarn-deps-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      #     restore-keys: |
      #       yarn-deps-${{ runner.os }}-

      # - name: Install Dependencies
      #   run: yarn install --frozen-lockfile --network-timeout 300000

      # # ðŸ“¦ Cache CocoaPods
      # - name: Cache CocoaPods
      #   uses: actions/cache@v4
      #   with:
      #     path: ios/Pods
      #     key: pods-${{ runner.os }}-${{ hashFiles('ios/Podfile.lock') }}
      #     restore-keys: |
      #       pods-${{ runner.os }}-

      # - name: Install CocoaPods Dependencies
      #   run: |
      #     cd ios
      #     pod install --repo-update
      - name: Clean iOS build
        run: |
          cd ios
          xcodebuild clean
      
            # ðŸ“¦ Cache iOS Build
      - name: Cache iOS Build
        uses: actions/cache@v4
        with:
          path: build/
          key: ios-build-${{ github.run_id }}
          restore-keys: |
            ios-build-

      - name: Build the iOS app
        run: |
          xcodebuild -workspace ios/ci_test.xcworkspace \
            -scheme ci_test \
            -configuration "Release" \
            -sdk iphoneos \
            -archivePath build/ci_test.xcarchive \
            -allowProvisioningUpdates \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$APPLE_DEVELOPMENT_TEAM \
            PROVISIONING_PROFILE_SPECIFIER="CI_DISTRUBUTION" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            archive

      - name: Export the IPA file
        run: |
          xcodebuild -exportArchive \
            -archivePath build/ci_test.xcarchive \
            -exportPath build/export \
            -exportOptionsPlist ios/ExportOptions.plist \
            -allowProvisioningUpdates


      - name: Debug - List build directory
        run: ls -R build

      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci_test-ipa
          path: build/export/ci_test.ipa

      - name: Decode ExportOptions.plist from secrets
        run: |
          echo "${{ secrets.EXPORT_OPTIONS_PLIST }}" | base64 --decode -o $RUNNER_TEMP/ExportOptions.plist


      # - name: export ipa
      #   env:
      #     EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      #   run: |
      #     EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
      #     echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
      #     xcodebuild -exportArchive -archivePath build/ci_test.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build 
    
      # - name: Upload IPA to TestFlight
      #   env:
      #     APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      #     APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      #     APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
      #   run: |
      #     xcrun altool --upload-app \
      #       -f build/export/ci_test.ipa \
      #       -t ios \
      #       --apiKey $APP_STORE_CONNECT_API_KEY_ID \
      #       --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID  

      # - name: Install dependencies
      #   run: yarn install --frozen-lockfile --network-timeout 300000

      # - name: Install CocoaPods dependencies
      #   run: |
      #     cd ios
      #     pod install --repo-update

      # - name: Build the iOS app
      #   run: |
      #     cd ios
      #     xcodebuild -workspace ci_test.xcworkspace \
      #       -scheme ci_test \
      #       -configuration "Release" \
      #       -sdk iphoneos \
      #       -archivePath build/ci_test.xcarchive \
      #       CODE_SIGN_STYLE=Automatic \
      #       DEVELOPMENT_TEAM=$APPLE_DEVELOPMENT_TEAM \
      #       archive
